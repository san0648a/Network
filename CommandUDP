//SERVER

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 256

int main() {
    struct sockaddr_in serv_addr, cli_addr;
    int sockfd;
    socklen_t cli_len = sizeof(cli_addr);
    char buff[BUFFER_SIZE];

    unsigned short serv_port = 25022;
    char serv_ip[] = "127.0.0.1";

    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("SERVER ERROR: Cannot create socket");
        exit(1);
    }

    if ((bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0) {
        perror("SERVER ERROR: Cannot bind");
        close(sockfd);
        exit(1);
    }

    printf("\nCOMMAND UDP SERVER STARTED.\n");

    while (1) {
        printf("\nSERVER: Waiting for client to connect...\n");

        bzero(buff, BUFFER_SIZE);
        recvfrom(sockfd, buff, BUFFER_SIZE, 0, (struct sockaddr*)&cli_addr, &cli_len);

        while (1) {
            printf("Enter 'exit' to disconnect client or press Enter to continue: ");
            char input[BUFFER_SIZE];
            fgets(input, BUFFER_SIZE, stdin);
            input[strcspn(input, "\n")] = 0;

            if (strcmp(input, "exit") == 0) {
                strcpy(buff, "exit");
                sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&cli_addr, cli_len);
                printf("\nSERVER: Disconnected client manually.\n");
                break;
            }

            // Send READY signal to client
            strcpy(buff, "READY");
            sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&cli_addr, cli_len);

            // Receive command from client
            bzero(buff, BUFFER_SIZE);
            recvfrom(sockfd, buff, BUFFER_SIZE, 0, (struct sockaddr*)&cli_addr, &cli_len);

            if (strcmp(buff, "exit") == 0) {
                printf("\nSERVER: Client requested disconnection.\n");
                break;
            }

            printf("\nSERVER: Client sent command: %s\n", buff);

            // Execute command and send output directly
            FILE *fp = popen(buff, "r");
            if (fp == NULL) {
                strcpy(buff, "Invalid Command or Execution Failed\n");
                sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&cli_addr, cli_len);
            } else {
                int hasOutput = 0;
                while (fgets(buff, BUFFER_SIZE - 1, fp) != NULL) {
                    sendto(sockfd, buff, strlen(buff), 0, (struct sockaddr*)&cli_addr, cli_len);
                    hasOutput = 1;
                    usleep(1000);  // prevent packet loss
                }
                pclose(fp);

                if (!hasOutput) {
                    strcpy(buff, "Invalid Command or No Output\n");
                    sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&cli_addr, cli_len);
                }

                // Send end marker
                strcpy(buff, "[END]");
                sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&cli_addr, cli_len);
                printf("\nSERVER: Sent output to client.\n");
            }
        }
    }

    close(sockfd);
    return 0;
}

//CLIENT

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 256

int main() {
    struct sockaddr_in serv_addr;
    int sockfd;
    socklen_t serv_len = sizeof(serv_addr);
    char buff[BUFFER_SIZE];

    unsigned short serv_port = 25022;
    char serv_ip[] = "127.0.0.1";

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("CLIENT ERROR: Cannot create socket");
        exit(1);
    }

    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    printf("\nCLIENT: Connected to server at %s:%d\n", serv_ip, serv_port);

    // Initial hello message to trigger server readiness
    char hello[] = "hello";
    sendto(sockfd, hello, strlen(hello) + 1, 0, (struct sockaddr*)&serv_addr, serv_len);

    while (1) {
        // Wait for "READY" or "exit"
        bzero(buff, BUFFER_SIZE);
        int bytesRead = recvfrom(sockfd, buff, BUFFER_SIZE - 1, 0, NULL, NULL);
        if (bytesRead <= 0) continue;
        buff[bytesRead] = '\0';

        if (strcmp(buff, "exit") == 0) {
            printf("\nCLIENT: Server requested disconnection.\n");
            break;
        }

        if (strcmp(buff, "READY") != 0) continue;

        // Prompt user for command
        printf("\nCLIENT: Enter a command to execute (or 'exit' to quit): ");
        fgets(buff, BUFFER_SIZE, stdin);
        buff[strcspn(buff, "\n")] = 0;

        sendto(sockfd, buff, strlen(buff) + 1, 0, (struct sockaddr*)&serv_addr, serv_len);

        if (strcmp(buff, "exit") == 0) {
            printf("\nCLIENT: Disconnected from server.\n");
            break;
        }

        // Receive and print server output
        printf("\nSERVER OUTPUT:\n");
        while (1) {
            bzero(buff, BUFFER_SIZE);
            int bytesRead = recvfrom(sockfd, buff, BUFFER_SIZE - 1, 0, NULL, NULL);
            if (bytesRead <= 0) break;

            buff[bytesRead] = '\0';

            if (strcmp(buff, "exit") == 0) {
                printf("\nCLIENT: Server requested disconnection.\n");
                close(sockfd);
                exit(0);
            }

            if (strcmp(buff, "[END]") == 0) break;

            printf("%s", buff);
        }
        printf("\n");
    }

    close(sockfd);
    return 0;
}
