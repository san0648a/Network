//SERVER
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 256
struct sockaddr_in serv_addr, cli_addr;

int listenfd, connfd, r, w;
socklen_t cli_addr_len;

unsigned short serv_port = 25022; 
char serv_ip[] = "127.0.0.1";     

char buff[BUFFER_SIZE]; 

void calculateResult(char *buffer, char *resultBuffer) {
    double num1, num2, result;
    char operator;

    sscanf(buffer, "%lf %c %lf", &num1, &operator, &num2);

    switch (operator) {
        case '+': result = num1 + num2; break;
        case '-': result = num1 - num2; break;
        case '*': result = num1 * num2; break;
        case '/': 
            if (num2 != 0) 
                result = num1 / num2; 
            else {
                strcpy(resultBuffer, "Error: Division by zero");
                return;
            }
            break;
        default: 
            strcpy(resultBuffer, "Error: Invalid operator");
            return;
    }
    
    snprintf(resultBuffer, 128, "Result: %.2f", result);
}

int main() {
    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    printf("\nTCP CALCULATOR SERVER.\n");

    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\nSERVER ERROR: Cannot create socket.\n");
        exit(1);
    }

    if ((bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0) {
        printf("\nSERVER ERROR: Cannot bind.\n");
        close(listenfd);
        exit(1);
    }

    if ((listen(listenfd, 5)) < 0) {
        printf("\nSERVER ERROR: Cannot listen.\n");
        close(listenfd);
        exit(1);
    }

    cli_addr_len = sizeof(cli_addr);
    for (;;) {
        printf("\nSERVER: Listening for clients... Press Ctrl + C to stop.\n");

        if ((connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &cli_addr_len)) < 0) {
            printf("\nSERVER ERROR: Cannot accept client connections.\n");
            close(listenfd);
            exit(1);
        }
        printf("\nSERVER: Connection from client %s accepted.\n", inet_ntoa(cli_addr.sin_addr));

        while(1) {
            printf("Enter exit to disconnect \n");
            char prompt[BUFFER_SIZE];
            fgets(prompt, BUFFER_SIZE, stdin);
            prompt[strcspn(prompt, "\n")] = 0;
            write(connfd, prompt, strlen(prompt) + 1);

            bzero(buff, BUFFER_SIZE);
            if (read(connfd, buff, BUFFER_SIZE) <= 0) {
                printf("\nSERVER: Wants to disconnect client.\n");
                break;
            }

            if (strcmp(buff, "exit") == 0) {
                printf("\nSERVER: Client requested disconnection.\n");
                write(connfd, "exit", 5);
                break;
            }

            printf("\nSERVER: Received calculation request: %s\n", buff);

            char resultBuffer[128];
            calculateResult(buff, resultBuffer);

            if ((w = write(connfd, resultBuffer, 128)) < 0)
                printf("\nSERVER ERROR: Cannot send result to client.\n");
            else
                printf("\nSERVER: Sent result: %s\n", resultBuffer);
        }
        close(connfd);
    }
}



//CLIENT

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 256

int main() {
    struct sockaddr_in serv_addr;
    int sockfd;
    char buff[BUFFER_SIZE];

    unsigned short serv_port = 25022;
    char serv_ip[] = "127.0.0.1";

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("CLIENT ERROR: Cannot create socket");
        exit(1);
    }

    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("CLIENT ERROR: Cannot connect to server");
        close(sockfd);
        exit(1);
    }

    printf("\nCLIENT: Connected to server at %s:%d\n", serv_ip, serv_port);

    for (;;) {
        bzero(buff, BUFFER_SIZE);

        if (read(sockfd, buff, BUFFER_SIZE) <= 0) {
            printf("\nCLIENT: Server closed the connection.\n");
            break;
        }

        if (strcmp(buff, "exit") == 0) {
            printf("\nCLIENT: Disconnected from server.\n");
            close(sockfd);
            exit(0);
        }

        printf("\nCLIENT: Enter expression to continue and (exit) to quit: ");
        fgets(buff, BUFFER_SIZE, stdin);
        buff[strcspn(buff, "\n")] = 0;

        if (strcmp(buff, "exit") == 0) {
            write(sockfd, buff, strlen(buff) + 1);
            break;
        }

        write(sockfd, buff, strlen(buff) + 1);

        bzero(buff, BUFFER_SIZE);
        if (read(sockfd, buff, BUFFER_SIZE) <= 0) break;

        printf("\nCLIENT: Received result from server: %s\n", buff);
    }

    printf("\nCLIENT: Disconnected from server.\n");
    close(sockfd);
    return 0;
}
