//SERVER

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

#define BUFFER_SIZE 256

int main() {
    struct sockaddr_in serv_addr, cli_addr;
    int listenfd, connfd;
    socklen_t cli_addr_len;
    char buff[BUFFER_SIZE];

    unsigned short serv_port = 25022;
    char serv_ip[] = "127.0.0.1";

    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    printf("\nTIME SERVER STARTED.\n");

    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("SERVER ERROR: Cannot create socket");
        exit(1);
    }

    if ((bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0) {
        perror("SERVER ERROR: Cannot bind");
        close(listenfd);
        exit(1);
    }

    if ((listen(listenfd, 5)) < 0) {
        perror("SERVER ERROR: Cannot listen");
        close(listenfd);
        exit(1);
    }

    cli_addr_len = sizeof(cli_addr);
    for (;;) {
        printf("\nSERVER: Waiting for client connections... Press Ctrl + C to terminate.\n");
        if ((connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &cli_addr_len)) < 0) {
            perror("SERVER ERROR: Cannot accept connection");
            continue;
        }
        printf("\nSERVER: Connected to client at %s.\n", inet_ntoa(cli_addr.sin_addr));

        while (1) {
            printf("\nSERVER: Type 'exit' to disconnect client or any key to send time: ");
            char prompt[BUFFER_SIZE];
            fgets(prompt, BUFFER_SIZE, stdin);
            prompt[strcspn(prompt, "\n")] = 0;
            write(connfd, prompt, strlen(prompt) + 1);

            bzero(buff, BUFFER_SIZE);
            if (read(connfd, buff, BUFFER_SIZE) <= 0) {
                printf("\nSERVER: Wants to disconnect client.\n");
                break;
            }

            if (strcmp(buff, "exit") == 0) {
                printf("\nSERVER: Client requested disconnection.\n");
                write(connfd, "exit", 5);
                break;
            }

            time_t now = time(NULL);
            struct tm *tm_info = localtime(&now);
            strftime(buff, BUFFER_SIZE, "Current Time: %Y-%m-%d %H:%M:%S", tm_info);

            write(connfd, buff, strlen(buff) + 1);
            printf("\nSERVER: Sent time to client: %s\n", buff);
        }

        close(connfd);
    }
}

//CLIENT

#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 256

int main() {
    struct sockaddr_in serv_addr;
    int sockfd;
    char buff[BUFFER_SIZE];

    unsigned short serv_port = 25022;
    char serv_ip[] = "127.0.0.1";

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("CLIENT ERROR: Cannot create socket");
        exit(1);
    }

    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("CLIENT ERROR: Cannot connect to server");
        close(sockfd);
        exit(1);
    }

    printf("\nCLIENT: Connected to server at %s:%d\n", serv_ip, serv_port);

    for (;;) {
        bzero(buff, BUFFER_SIZE);

        if (read(sockfd, buff, BUFFER_SIZE) <= 0) {
            printf("\nCLIENT: Server closed the connection.\n");
            break;
        }

        if (strcmp(buff, "exit") == 0) {
            printf("\nCLIENT: Disconnected from server.\n");
            close(sockfd);
            exit(0);
        }

        printf("\nCLIENT: Press Enter to request time or type 'exit' to quit: ");
        fgets(buff, BUFFER_SIZE, stdin);
        buff[strcspn(buff, "\n")] = 0;

        if (strcmp(buff, "exit") == 0) {
            write(sockfd, buff, strlen(buff) + 1);
            break;
        }

        write(sockfd, "time", 5);

        bzero(buff, BUFFER_SIZE);
        if (read(sockfd, buff, BUFFER_SIZE) <= 0) break;

        printf("\nCLIENT: Received from server: %s\n", buff);
    }

    printf("\nCLIENT: Disconnected from server.\n");
    close(sockfd);
    return 0;
}
