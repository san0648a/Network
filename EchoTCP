//SERVER

/*TCP Echo Server Program*/

#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include <unistd.h>

struct sockaddr_in serv_addr, cli_addr;

int listenfd, connfd, r, w, val;
socklen_t cli_addr_len;


unsigned short serv_port = 25022; /*port number to be used by the server*/
char serv_ip[] = "127.0.0.1"; /*server's IP-address*/

char buff[128]; /*buffer for sending and receiving messages*/

int main() {
    /*initializing server socket address structure with zero values*/
    bzero(&serv_addr, sizeof(serv_addr));
                                                                                                                        
    /*filling up the server socket address structure with appropriate values*/
    serv_addr.sin_family = AF_INET; /*address family*/
    serv_addr.sin_port = htons(serv_port); /*port number*/
    inet_aton(serv_ip, (&serv_addr.sin_addr)); /*IP-address*/

	printf("\nTCP ECHO SERVER.\n");
                                                                                                                            
    /*creating socket*/
    if((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\nSERVER ERROR: Cannot create socket.\n");
        exit(1);
    }
                                                                                                                            
    /*binding server socket address structure*/
    if((bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0){
        printf("\nSERVER ERROR: Cannot bind.\n");
        close(listenfd);
        exit(1);
    }

		/*listen to client connection requests*/
	if((listen(listenfd, 5)) < 0) {
		printf("\nSERVER ERROR: Cannot listen.\n");
		close(listenfd);
		exit(1);
	}

	cli_addr_len = sizeof(cli_addr);
	for( ; ;) {
		printf("\nSERVER: Listenning for clients...Press Cntrl + c to stop echo server:\n");
			
		/*accept client connections*/	
		if((connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &cli_addr_len)) < 0) {
			printf("\nSERVER ERROR: Cannot accept client connections.\n");
			close(listenfd);
			exit(1);
		}
		printf("\nSERVER: Connection fron client %s accepted.\n", inet_ntoa(cli_addr.sin_addr));

		/*waiting for messages from client*/
		if((r = read(connfd, buff, 128)) < 0)
			printf("\nSERVER ERROR: Cannot receive message from client.\n");
		else {
			buff[r] = '\0';
																																
			/*echo back the message received from client*/
			if((w = write(connfd, buff, 128)) < 0)
					printf("\nSERVER ERROR: Cannot send message to the client.\n");
			else
				printf("\nSERVER: Echoed back %s to %s.\n", buff, inet_ntoa(cli_addr.sin_addr));
		}
	} /*for ends*/
} /*main ends*/

//CLIENT

/*TCP Echo Client Program*/

#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include <unistd.h>

struct sockaddr_in serv_addr;
                        
int skfd, r, w;

unsigned short serv_port = 25022; /*port number used by the server*/
char serv_ip[] = "127.0.0.1"; /*server's IP-address*/
               
char rbuff[128]; /*buffer for receiving messages*/
char sbuff[128] = "===good night==="; /*buffer for sending messages*/

int main() {
	/*initializing server socket address structure with zero values*/
	bzero(&serv_addr, sizeof(serv_addr));

	/*filling up the server socket address structure with appropriate values*/
	serv_addr.sin_family = AF_INET; /*address family*/
	serv_addr.sin_port = htons(serv_port); /*port number*/
	inet_aton(serv_ip, (&serv_addr.sin_addr)); /*IP-address*/
	
	printf("\nTCP ECHO CLIENT.\n");

    /*creating socket*/
    if((skfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		printf("\nCLIENT ERROR: Cannot create socket.\n");
		exit(1);
    }

	/*request server for a connection*/
	if((connect(skfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0) {
		printf("\nCLIENT ERROR: Cannot connect to the server.\n");
		close(skfd);
		exit(1);
	}
	printf("\nCLIENT: Connected to the server.\n");

	/*send a message to the echo server*/
	if((w = write(skfd, sbuff, 128)) < 0) {
		printf("\nCLIENT ERROR: Cannot send message to the echo server.\n");
		close(skfd);
		exit(1);
	}
	printf("\nCLIENT: Message sent to echo server.\n");

	/*read back the echoed message from server*/
	if((r = read(skfd, rbuff, 128)) < 0)
		printf("\nCLIENT ERROR: Cannot receive mesage from server.\n");
	else
	{
		rbuff[r] = '\0';
		 /*print the received message on console*/
		printf("\nCLIENT: Message from echo server: %s\n", rbuff);

	}
	close(skfd);
	exit(1);
} /*main ends*/
